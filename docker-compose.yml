services:
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 3s
      retries: 20

  otel-collector:
    image: otel/opentelemetry-collector:0.102.1
    command: ["--config=/etc/otelcol-config.yaml"]
    volumes:
      - ./infra/otel-collector-config.yaml:/etc/otelcol-config.yaml:ro

  api:
    build: ./apps/api
    environment:
      DATABASE_URL: ${DATABASE_URL}
      API_LOG_LEVEL: ${API_LOG_LEVEL}
      CORS_ORIGINS: ${CORS_ORIGINS}
      ENVIRONMENT: ${ENVIRONMENT}
      SENTRY_DSN: ${SENTRY_DSN}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
      OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME}
      OTEL_TRACES_SAMPLER: ${OTEL_TRACES_SAMPLER}
      OTEL_TRACES_SAMPLER_ARG: ${OTEL_TRACES_SAMPLER_ARG}
    depends_on:
      db:
        condition: service_healthy
      otel-collector:
        condition: service_started
    ports:
      - "${API_PORT}:8000"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 15s

  web:
    build: ./apps/web
    environment:
      WEB_API_BASE: ${WEB_API_BASE}
      SENTRY_DSN: ${SENTRY_DSN}
      ENVIRONMENT: ${ENVIRONMENT}
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "${WEB_PORT}:80"

volumes:
  db_data:
